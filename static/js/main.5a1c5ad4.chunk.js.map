{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["interval","PATTERN_VIBRATE_FINISH_TIMER","PATTERN_VIBRATE_START_TIMER","sayMessage","title","voice","window","speechSynthesis","getVoices","find","lang","message","SpeechSynthesisUtterance","speak","e","vibrate","pattern","navigator","showNotification","config","a","serviceWorker","getRegistration","registration","enableNotifications","Notification","permission","requestPermission","useTimer","minutes","seconds","useState","defaultTimer","setDefaulTimer","timer","setTimer","status","setStatus","finishedTimer","restartTimer","clearInterval","pauseTimer","reduceTimer","body","tag","silent","renotify","playTimer","setInterval","updateTimer","useForm","active","setActiveForm","data","setForm","form","App","pad2","number","String","length","onSubmit","event","preventDefault","onReset","type","min","max","placeholder","onInput","parseInt","target","value","defaultValue","step","includes","onClick","console","log","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","ready","then","unregister"],"mappings":"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","file":"static/js/main.5a1c5ad4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.scss';\n\n// import WebWorker from './workerSetup';\n\n// const worker = new WebWorker(`\n//   self.addEventListener('message', e => {\n//     // eslint-disable-line no-restricted-globals\n//     console.log(e.data);\n//   })\n// `);\n\n// worker.postMessage('Fetch Users');\n\nlet interval = null;\n\nconst PATTERN_VIBRATE_FINISH_TIMER = [500, 250, 500, 250, 500];\n\nconst PATTERN_VIBRATE_START_TIMER = [200];\n\nconst sayMessage = (title = 'Timer') => {\n  try {\n    const voice = window.speechSynthesis.getVoices().find(voice => voice.lang === 'en-US');\n    const message = new SpeechSynthesisUtterance(`${title} FinishedÂ¡`);\n    message.voice = voice || window.speechSynthesis.getVoices()[0];\n    window.speechSynthesis.speak(message);\n  } catch (e) {}\n};\n\nconst vibrate = pattern => {\n  try {\n    window.navigator.vibrate(pattern);\n  } catch (e) {}\n};\n\nconst showNotification = async (title, config) => {\n  try {\n    const registration = await navigator.serviceWorker.getRegistration();\n    if (!registration) return;\n\n    registration.showNotification(title, config);\n  } catch (e) {}\n};\n\nconst enableNotifications = async () => {\n  try {\n    if (!('Notification' in window) || !('serviceWorker' in navigator)) {\n      // return alert('Tu navegador no soporta notificaciones')\n      return;\n    }\n\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission === 'blocked') {\n      // return alert('Bloqueaste las notificaciones :(')\n      return;\n    }\n\n    if (Notification.permission !== 'granted') {\n      return;\n    }\n  } catch (e) {}\n};\n\nconst useTimer = ({ minutes = 0, seconds = 0 } = {}) => {\n  const [defaultTimer, setDefaulTimer] = useState({ minutes, seconds });\n  const [timer, setTimer] = useState({ minutes, seconds });\n  const [status, setStatus] = useState('off');\n\n  const finishedTimer = ({ minutes, seconds }) => minutes <= 0 && seconds <= 0;\n\n  const restartTimer = () => {\n    setStatus('off');\n    if (interval) {\n      clearInterval(interval);\n      interval = null;\n    }\n    setTimer({ ...defaultTimer });\n  };\n\n  const pauseTimer = () => {\n    setStatus('pause');\n    clearInterval(interval);\n    interval = null;\n  };\n\n  const reduceTimer = () => {\n    if (timer.seconds <= 0) {\n      timer.minutes--;\n      timer.seconds = 60;\n    }\n    timer.seconds--;\n    setTimer({ ...timer });\n\n    if (finishedTimer(timer)) {\n      restartTimer();\n      sayMessage();\n      enableNotifications();\n      showNotification('Timer finished!', {\n        body: 'Timer finished!',\n        tag: 1,\n        silent: false,\n        renotify: true,\n        vibrate: PATTERN_VIBRATE_FINISH_TIMER\n      });\n      // vibrate(PATTERN_VIBRATE_FINISH_TIMER);\n    }\n  };\n\n  const playTimer = () => {\n    if (status === 'off') setDefaulTimer({ ...timer });\n\n    enableNotifications();\n    vibrate(PATTERN_VIBRATE_START_TIMER);\n    interval = setInterval(reduceTimer, 1000);\n    setStatus('on');\n  };\n\n  const updateTimer = timer => {\n    setTimer(timer);\n  };\n\n  return {\n    timer: { ...timer, status },\n    restartTimer,\n    pauseTimer,\n    playTimer,\n    updateTimer\n  };\n};\n\nconst useForm = () => {\n  const [active, setActiveForm] = useState(false);\n  const [data, setForm] = useState({ minutes: 0, seconds: 0 });\n\n  return {\n    form: {\n      ...data,\n      active\n    },\n    setActiveForm,\n    setForm\n  };\n};\n\nfunction App() {\n  const { timer, restartTimer, pauseTimer, playTimer, updateTimer } = useTimer({\n    minutes: 1,\n    seconds: 0\n  });\n\n  const { form, setForm, setActiveForm } = useForm({ minutes: 0, seconds: 0 });\n\n  const handleSubmitForm = event => {\n    event.preventDefault();\n    updateTimer(form);\n    setActiveForm(false);\n  };\n\n  const handleResetForm = event => {\n    event.preventDefault();\n    setActiveForm(false);\n  };\n\n  const pad2 = number => (String(number).length === 1 ? `0${number}` : number);\n\n  return (\n    <div>\n      {form.active ? (\n        <form onSubmit={handleSubmitForm} onReset={handleResetForm}>\n          <input\n            type='number'\n            min='0'\n            max='59'\n            placeholder='minutes'\n            onInput={event => setForm({ ...form, minutes: parseInt(event.target.value) })}\n            defaultValue={form.minutes}\n          />\n\n          <input\n            type='number'\n            min='0'\n            max='59'\n            step='5'\n            placeholder='seconds'\n            onInput={event => setForm({ ...form, seconds: parseInt(event.target.value) })}\n            defaultValue={form.seconds}\n          />\n          <br />\n          <button type='reset'>cancelar</button>\n          <button type='submit'>actualizar</button>\n        </form>\n      ) : (\n        <div>\n          <div>\n            {['off', 'pause'].includes(timer.status) && (\n              <button\n                onClick={() => {\n                  setForm({ ...timer });\n                  setActiveForm(true);\n                  console.log(timer);\n                }}\n              >\n                editar\n              </button>\n            )}\n          </div>\n\n          <div>\n            <span>{pad2(timer.minutes)}</span>:<span>{pad2(timer.seconds)}</span>\n          </div>\n\n          <div>\n            {['on', 'pause'].includes(timer.status) && <button onClick={restartTimer}>reiniciar</button>}\n            {['off', 'pause'].includes(timer.status) && <button onClick={playTimer}>play</button>}\n            {timer.status === 'on' && <button onClick={pauseTimer}>pause</button>}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}