{
  "version": 3,
  "sources": [
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "interval",
    "PATTERN_VIBRATE_FINISH_TIMER",
    "PATTERN_VIBRATE_START_TIMER",
    "sayMessage",
    "title",
    "voice",
    "window",
    "speechSynthesis",
    "getVoices",
    "find",
    "lang",
    "message",
    "SpeechSynthesisUtterance",
    "speak",
    "e",
    "vibrate",
    "pattern",
    "navigator",
    "showNotification",
    "config",
    "a",
    "serviceWorker",
    "getRegistration",
    "registration",
    "enableNotifications",
    "Notification",
    "permission",
    "requestPermission",
    "useTimer",
    "minutes",
    "seconds",
    "useState",
    "defaultTimer",
    "setDefaulTimer",
    "timer",
    "setTimer",
    "status",
    "setStatus",
    "finishedTimer",
    "restartTimer",
    "clearInterval",
    "pauseTimer",
    "reduceTimer",
    "body",
    "tag",
    "silent",
    "renotify",
    "playTimer",
    "setInterval",
    "updateTimer",
    "useForm",
    "active",
    "setActiveForm",
    "data",
    "setForm",
    "form",
    "App",
    "pad2",
    "number",
    "String",
    "length",
    "onSubmit",
    "event",
    "preventDefault",
    "onReset",
    "type",
    "min",
    "max",
    "placeholder",
    "onInput",
    "parseInt",
    "target",
    "value",
    "defaultValue",
    "step",
    "includes",
    "onClick",
    "console",
    "log",
    "Boolean",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "document",
    "getElementById",
    "ready",
    "then",
    "unregister"
  ],
  "mappings": "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",
  "file": "timer/static/js/main.c6f931d2.chunk.js",
  "sourcesContent": [
    "import React, { useState } from 'react';\r\nimport './App.scss';\r\n\r\nlet interval = null;\r\n\r\nconst PATTERN_VIBRATE_FINISH_TIMER = [500, 250, 500, 250, 500];\r\n\r\nconst PATTERN_VIBRATE_START_TIMER = [200];\r\n\r\nconst sayMessage = (title = 'Timer') => {\r\n  try {\r\n    const voice = window.speechSynthesis.getVoices().find(voice => voice.lang === 'en-US');\r\n    const message = new SpeechSynthesisUtterance(`${title} FinishedÂ¡`);\r\n    message.voice = voice || window.speechSynthesis.getVoices()[0];\r\n    window.speechSynthesis.speak(message);\r\n  } catch (e) {}\r\n};\r\n\r\nconst vibrate = pattern => {\r\n  try {\r\n    window.navigator.vibrate(pattern);\r\n  } catch (e) {}\r\n};\r\n\r\nconst showNotification = async (title, config) => {\r\n  try {\r\n    const registration = await navigator.serviceWorker.getRegistration();\r\n    if (!registration) return;\r\n\r\n    registration.showNotification(title, config);\r\n  } catch (e) {}\r\n};\r\n\r\nconst enableNotifications = async () => {\r\n  try {\r\n    if (!('Notification' in window) || !('serviceWorker' in navigator)) {\r\n      // return alert('Tu navegador no soporta notificaciones')\r\n      return;\r\n    }\r\n\r\n    if (Notification.permission === 'default') {\r\n      await Notification.requestPermission();\r\n    }\r\n\r\n    if (Notification.permission === 'blocked') {\r\n      // return alert('Bloqueaste las notificaciones :(')\r\n      return;\r\n    }\r\n\r\n    if (Notification.permission !== 'granted') {\r\n      return;\r\n    }\r\n  } catch (e) {}\r\n};\r\n\r\nconst useTimer = ({ minutes = 0, seconds = 0 } = {}) => {\r\n  const [defaultTimer, setDefaulTimer] = useState({ minutes, seconds });\r\n  const [timer, setTimer] = useState({ minutes, seconds });\r\n  const [status, setStatus] = useState('off');\r\n\r\n  const finishedTimer = ({ minutes, seconds }) => minutes <= 0 && seconds <= 0;\r\n\r\n  const restartTimer = () => {\r\n    setStatus('off');\r\n    if (interval) {\r\n      clearInterval(interval);\r\n      interval = null;\r\n    }\r\n    setTimer({ ...defaultTimer });\r\n  };\r\n\r\n  const pauseTimer = () => {\r\n    setStatus('pause');\r\n    clearInterval(interval);\r\n    interval = null;\r\n  };\r\n\r\n  const reduceTimer = () => {\r\n    if (timer.seconds <= 0) {\r\n      timer.minutes--;\r\n      timer.seconds = 60;\r\n    }\r\n    timer.seconds--;\r\n    setTimer({ ...timer });\r\n\r\n    enableNotifications();\r\n    showNotification(`${timer.minutes}:${timer.seconds}`, {\r\n      body: 'Timer in process!',\r\n      tag: '11111',\r\n      silent: false,\r\n      renotify: true,\r\n      vibrate: PATTERN_VIBRATE_FINISH_TIMER\r\n    });\r\n\r\n    if (finishedTimer(timer)) {\r\n      sayMessage();\r\n      enableNotifications();\r\n      showNotification('Timer finished!', {\r\n        body: 'Timer finished!',\r\n        tag: '11111',\r\n        silent: false,\r\n        renotify: true,\r\n        vibrate: PATTERN_VIBRATE_FINISH_TIMER\r\n      });\r\n\r\n      restartTimer();\r\n      // vibrate(PATTERN_VIBRATE_FINISH_TIMER);\r\n    }\r\n  };\r\n\r\n  const playTimer = () => {\r\n    if (status === 'off') setDefaulTimer({ ...timer });\r\n\r\n    enableNotifications();\r\n    vibrate(PATTERN_VIBRATE_START_TIMER);\r\n    interval = setInterval(reduceTimer, 1000);\r\n    setStatus('on');\r\n  };\r\n\r\n  const updateTimer = timer => {\r\n    setDefaulTimer({ ...timer });\r\n    setTimer({ ...timer });\r\n  };\r\n\r\n  return {\r\n    timer: { ...timer, status },\r\n    restartTimer,\r\n    pauseTimer,\r\n    playTimer,\r\n    updateTimer\r\n  };\r\n};\r\n\r\nconst useForm = () => {\r\n  const [active, setActiveForm] = useState(false);\r\n  const [data, setForm] = useState({ minutes: 0, seconds: 0 });\r\n\r\n  return {\r\n    form: {\r\n      ...data,\r\n      active\r\n    },\r\n    setActiveForm,\r\n    setForm\r\n  };\r\n};\r\n\r\nfunction App() {\r\n  const { timer, restartTimer, pauseTimer, playTimer, updateTimer } = useTimer({\r\n    minutes: 1,\r\n    seconds: 0\r\n  });\r\n\r\n  const { form, setForm, setActiveForm } = useForm({ minutes: 0, seconds: 0 });\r\n\r\n  const handleSubmitForm = event => {\r\n    event.preventDefault();\r\n    updateTimer(form);\r\n    setActiveForm(false);\r\n  };\r\n\r\n  const handleResetForm = event => {\r\n    event.preventDefault();\r\n    setActiveForm(false);\r\n  };\r\n\r\n  const pad2 = number => (String(number).length === 1 ? `0${number}` : number);\r\n\r\n  return (\r\n    <div>\r\n      {form.active ? (\r\n        <form onSubmit={handleSubmitForm} onReset={handleResetForm}>\r\n          <input\r\n            type='number'\r\n            min='0'\r\n            max='59'\r\n            placeholder='minutes'\r\n            onInput={event => setForm({ ...form, minutes: parseInt(event.target.value) })}\r\n            defaultValue={form.minutes}\r\n          />\r\n\r\n          <input\r\n            type='number'\r\n            min='0'\r\n            max='59'\r\n            step='5'\r\n            placeholder='seconds'\r\n            onInput={event => setForm({ ...form, seconds: parseInt(event.target.value) })}\r\n            defaultValue={form.seconds}\r\n          />\r\n          <br />\r\n          <button type='reset'>cancelar</button>\r\n          <button type='submit'>actualizar</button>\r\n        </form>\r\n      ) : (\r\n        <div>\r\n          <div>\r\n            {['off', 'pause'].includes(timer.status) && (\r\n              <button\r\n                onClick={() => {\r\n                  setForm({ ...timer });\r\n                  setActiveForm(true);\r\n                  console.log(timer);\r\n                }}\r\n              >\r\n                editar\r\n              </button>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <span>{pad2(timer.minutes)}</span>:<span>{pad2(timer.seconds)}</span>\r\n          </div>\r\n\r\n          <div>\r\n            {['on', 'pause'].includes(timer.status) && <button onClick={restartTimer}>reiniciar</button>}\r\n            {['off', 'pause'].includes(timer.status) && <button onClick={playTimer}>play</button>}\r\n            {timer.status === 'on' && <button onClick={pauseTimer}>pause</button>}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
    "// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n",
    "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"
  ],
  "sourceRoot": ""
}
